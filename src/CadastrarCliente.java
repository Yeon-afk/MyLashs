
import clientes.Cliente;
import clientes.ClienteDAO;
import java.awt.Color;
import javax.swing.JOptionPane;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 * Tela de cadastro de clientes, permitindo inserir ou editar informações de um cliente.
 */
public class CadastrarCliente extends javax.swing.JFrame {
private Cliente cliente; 
   /**
     * Construtor padrão da classe CadastrarCliente.
     * Inicializa os componentes e configura os placeholders.
     */
    public CadastrarCliente() {
        initComponents();
        this.setLocationRelativeTo(null);
        setPlaceholders();
    }

    /**
     * Construtor para edição de um cliente existente.
     * 
     * @param cliente Objeto Cliente a ser editado.
     */
   public CadastrarCliente(Cliente cliente) {
        initComponents();
        this.setLocationRelativeTo(null);
        this.cliente = cliente;
        preencherCampos();
        setPlaceholders(); 
    }
   
   /**
     * Preenche os campos do formulário com os dados do cliente para edição.
     */ 
private void preencherCampos() {
        if (cliente != null) {
            txtNome.setText(cliente.getNome());
            txtCpf.setText(cliente.getCpf());
            txtEndereco.setText(cliente.getEndereco());
            txtEmail.setText(cliente.getEmail());
            txtTelefone.setText(cliente.getTelefone());
            txtDataNascimento.setText(cliente.getDataNascimento());
            txtCpf.setEnabled(false);
        }
    }

    /**
     * Configura os placeholders para os campos de entrada.
     */
    private void setPlaceholders() {
    txtNome.setText("Nome");
        txtNome.setForeground(Color.GRAY);
        txtEndereco.setText("Endereço");
        txtEndereco.setForeground(Color.GRAY);
        txtEmail.setText("Email");
        txtEmail.setForeground(Color.GRAY);
        txtTelefone.setText("Telefone");
        txtTelefone.setForeground(Color.GRAY);
        txtDataNascimento.setText("Data de Nascimento");
        txtDataNascimento.setForeground(Color.GRAY);
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtNome = new javax.swing.JTextField();
        txtCpf = new javax.swing.JFormattedTextField();
        txtDataNascimento = new javax.swing.JFormattedTextField();
        txtTelefone = new javax.swing.JFormattedTextField();
        txtEndereco = new javax.swing.JTextField();
        txtEmail = new javax.swing.JTextField();
        btnVoltar = new javax.swing.JButton();
        btnSalvar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setText("MyLashes");

        jLabel2.setText("Cadastrar um cliente:");

        txtNome.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtNome.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtNomeFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtNomeFocusLost(evt);
            }
        });

        try {
            txtCpf.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("###.###.###-##")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        txtCpf.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtCpf.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtCpfFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtCpfFocusLost(evt);
            }
        });

        try {
            txtDataNascimento.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##/##/####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        txtDataNascimento.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtDataNascimento.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtDataNascimentoFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtDataNascimentoFocusLost(evt);
            }
        });

        try {
            txtTelefone.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("(##)#####-####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        txtTelefone.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtTelefone.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtTelefoneFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtTelefoneFocusLost(evt);
            }
        });

        txtEndereco.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtEndereco.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtEnderecoFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtEnderecoFocusLost(evt);
            }
        });

        txtEmail.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtEmail.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtEmailFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtEmailFocusLost(evt);
            }
        });

        btnVoltar.setBackground(new java.awt.Color(51, 51, 51));
        btnVoltar.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnVoltar.setForeground(new java.awt.Color(255, 255, 255));
        btnVoltar.setText("Voltar");
        btnVoltar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVoltarActionPerformed(evt);
            }
        });

        btnSalvar.setBackground(new java.awt.Color(105, 109, 168));
        btnSalvar.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnSalvar.setForeground(new java.awt.Color(255, 255, 255));
        btnSalvar.setText("Salvar");
        btnSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalvarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(262, 262, 262)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel1))
                .addContainerGap(260, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtNome)
                    .addComponent(txtCpf)
                    .addComponent(txtDataNascimento)
                    .addComponent(txtTelefone)
                    .addComponent(txtEndereco)
                    .addComponent(txtEmail)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnVoltar, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 185, Short.MAX_VALUE)
                        .addComponent(btnSalvar, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(119, 119, 119))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(txtNome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(txtCpf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(txtDataNascimento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(txtTelefone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(txtEndereco, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnVoltar)
                    .addComponent(btnSalvar))
                .addContainerGap(88, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnVoltarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVoltarActionPerformed
        /**
     * Retorna para a tela de ações ao clicar no botão "Voltar".
     * 
     * @param evt Evento de clique no botão "Voltar".
     */
        new TelaAcoes().setVisible(true);
        dispose();
    }//GEN-LAST:event_btnVoltarActionPerformed

    /**
     * Valida se o e-mail informado contém "@" e ".com".
     * 
     * @param email E-mail a ser validado.
     * @return true se o e-mail for válido, false caso contrário.
     */
     private boolean validarEmail(String email) {
        return email.contains("@") && email.contains(".com");
    }
     
    private void btnSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalvarActionPerformed
        /**
     * Salva os dados do cliente após validação.
     * 
     * @param evt Evento de clique no botão "Salvar".
     */
        String nome = txtNome.getText().trim();
    String endereco = txtEndereco.getText().trim();
    String email = txtEmail.getText().trim();
    String cpf = txtCpf.getText().trim();
    String telefone = txtTelefone.getText().trim();
    String dataNascimento = txtDataNascimento.getText().trim();

    // Verificar se algum campo está vazio
    if (nome.isEmpty() || endereco.isEmpty() || email.isEmpty() || cpf.isEmpty() || telefone.isEmpty() || dataNascimento.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Preencha todos os campos!", "Erro", JOptionPane.ERROR_MESSAGE);
        return;
    }

    // Validação do email (verificar se contém "@" e ".com")
    if (!validarEmail(email)) {
        JOptionPane.showMessageDialog(this, "Email inválido! O email deve conter '@' e '.com'.", "Erro", JOptionPane.ERROR_MESSAGE);
        return;
    }

    // Criar o cliente
    Cliente cliente = new Cliente(nome, endereco, email, cpf, telefone, dataNascimento);

    // Adicionar o cliente no DAO
    ClienteDAO.adicionarCliente(cliente);

    // Mensagem de sucesso
    JOptionPane.showMessageDialog(this, "Cliente cadastrado com sucesso!");

    // Limpar os campos após salvar
    limparCampos();
    }//GEN-LAST:event_btnSalvarActionPerformed
    
    /**
     * Limpa os campos do formulário, restaurando os placeholders.
     */
    private void limparCampos() {
        txtNome.setText("Nome");
        txtNome.setForeground(Color.GRAY);
        txtEndereco.setText("Endereço");
        txtEndereco.setForeground(Color.GRAY);
        txtEmail.setText("Email");
        txtEmail.setForeground(Color.GRAY);
        txtCpf.setText("");
        txtTelefone.setText("");
        txtDataNascimento.setText("");
    }

    private void txtNomeFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtNomeFocusGained
        /**
     * Manipula o evento de foco do campo Nome.
     * Remove o placeholder quando o campo ganha foco.
     * 
     * @param evt Evento de foco.
     */
        if (txtNome.getText().equals("Nome")) {
            txtNome.setText("");
            txtNome.setForeground(Color.BLACK);
        }
    }//GEN-LAST:event_txtNomeFocusGained

    private void txtNomeFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtNomeFocusLost
         /**
     * Manipula o evento de perda de foco do campo Nome.
     * Restaura o placeholder se o campo estiver vazio.
     * 
     * @param evt Evento de foco.
     */
        if (txtNome.getText().isEmpty()) {
            txtNome.setText("Nome");
            txtNome.setForeground(Color.GRAY);
        }
    }//GEN-LAST:event_txtNomeFocusLost

    private void txtEnderecoFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtEnderecoFocusGained
         /**
     * Manipula o evento de foco do campo Endereco.
     * Remove o placeholder quando o campo ganha foco.
     * 
     * @param evt Evento de foco.
     */
        if (txtEndereco.getText().equals("Endereço")) {
            txtEndereco.setText("");
            txtEndereco.setForeground(Color.BLACK);
        }
    }//GEN-LAST:event_txtEnderecoFocusGained

    private void txtEnderecoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtEnderecoFocusLost
            /**
     * Manipula o evento de perda de foco do campo Endereco.
     * Restaura o placeholder se o campo estiver vazio.
     * 
     * @param evt Evento de foco.
     */
        if (txtEndereco.getText().isEmpty()) {
            txtEndereco.setText("Endereço");
            txtEndereco.setForeground(Color.GRAY);
        }
    }//GEN-LAST:event_txtEnderecoFocusLost

    private void txtEmailFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtEmailFocusGained
            /**
     * Manipula o evento de foco do campo Email.
     * Remove o placeholder quando o campo ganha foco.
     * 
     * @param evt Evento de foco.
     */
        if (txtEmail.getText().equals("Email")) {
            txtEmail.setText("");
            txtEmail.setForeground(Color.BLACK);
        }
    }//GEN-LAST:event_txtEmailFocusGained

    private void txtEmailFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtEmailFocusLost
        /**
     * Manipula o evento de perda de foco do campo Email.
     * Restaura o placeholder se o campo estiver vazio.
     * 
     * @param evt Evento de foco.
     */
        if (txtEmail.getText().isEmpty()) {
            txtEmail.setText("Email");
            txtEmail.setForeground(Color.GRAY);
        }
    }//GEN-LAST:event_txtEmailFocusLost

    private void txtCpfFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCpfFocusGained
            /**
     * Manipula o evento de foco do campo Cpf.
     * Remove o placeholder quando o campo ganha foco.
     * 
     * @param evt Evento de foco.
     */
        if (txtCpf.getText().equals("CPF")) {
        txtCpf.setText("");
        txtCpf.setForeground(Color.BLACK); // Muda a cor do texto para preto
    }
    }//GEN-LAST:event_txtCpfFocusGained

    private void txtCpfFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCpfFocusLost
           /**
     * Manipula o evento de perda de foco do campo Cpf.
     * Restaura o placeholder se o campo estiver vazio.
     * 
     * @param evt Evento de foco.
     */
        if (txtCpf.getText().isEmpty()) {
        txtCpf.setText("CPF");
        txtCpf.setForeground(Color.GRAY); // Restaura a cor do texto para cinza
    }
    }//GEN-LAST:event_txtCpfFocusLost

    private void txtDataNascimentoFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDataNascimentoFocusGained
        /**
     * Manipula o evento de foco do campo Data Nascimento.
     * Remove o placeholder quando o campo ganha foco.
     * 
     * @param evt Evento de foco.
     */ 
        if (txtDataNascimento.getText().equals("Data de Nascimento")) {
        txtDataNascimento.setText("");
        txtDataNascimento.setForeground(Color.BLACK);
    }
    }//GEN-LAST:event_txtDataNascimentoFocusGained

    private void txtDataNascimentoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDataNascimentoFocusLost
          /**
     * Manipula o evento de perda de foco do campo Data Nascimento.
     * Restaura o placeholder se o campo estiver vazio.
     * 
     * @param evt Evento de foco.
     */
        if (txtDataNascimento.getText().isEmpty()) {
        txtDataNascimento.setText("Data de Nascimento");
        txtDataNascimento.setForeground(Color.GRAY);
    }
    }//GEN-LAST:event_txtDataNascimentoFocusLost

    private void txtTelefoneFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtTelefoneFocusGained
        /**
     * Manipula o evento de foco do campo Telefone.
     * Remove o placeholder quando o campo ganha foco.
     * 
     * @param evt Evento de foco.
     */
        if (txtTelefone.getText().equals("Telefone")) {
        txtTelefone.setText("");
        txtTelefone.setForeground(Color.BLACK);
    }
    }//GEN-LAST:event_txtTelefoneFocusGained

    private void txtTelefoneFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtTelefoneFocusLost
           /**
     * Manipula o evento de perda de foco do campo Telefone.
     * Restaura o placeholder se o campo estiver vazio.
     * 
     * @param evt Evento de foco.
     */
        if (txtTelefone.getText().isEmpty()) {
        txtTelefone.setText("Telefone");
        txtTelefone.setForeground(Color.GRAY);
    }
    }//GEN-LAST:event_txtTelefoneFocusLost

 


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnSalvar;
    private javax.swing.JButton btnVoltar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JFormattedTextField txtCpf;
    private javax.swing.JFormattedTextField txtDataNascimento;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtEndereco;
    private javax.swing.JTextField txtNome;
    private javax.swing.JFormattedTextField txtTelefone;
    // End of variables declaration//GEN-END:variables
}
