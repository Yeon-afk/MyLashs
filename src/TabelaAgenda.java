
import agendamento.Agendamento;
import agendamento.AgendamentoDAO;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 * Classe que representa a tela de agenda onde os agendamentos são listados e gerenciados.
 * Permite buscar, editar, excluir, visualizar detalhes e registrar pagamentos de agendamentos.
 */
public class TabelaAgenda extends javax.swing.JFrame {
    private AgendamentoDAO agendamentoDAO;
    private Agendamento agendamento;
    /**
     * Construtor da classe TabelaAgenda.
     * Inicializa os componentes e carrega os agendamentos na tabela.
     */
    public TabelaAgenda() {
        initComponents();
        this.setLocationRelativeTo(null);
        agendamentoDAO = new AgendamentoDAO(); // Inicializando o DAO para gerenciar os agendamentos
        atualizarTabela();
    }

    
    /**
     * Atualiza a tabela de agendamentos com os dados disponíveis.
     */
   private void atualizarTabela() {
    DefaultTableModel model = (DefaultTableModel) tableAgenda.getModel();
    model.setRowCount(0); // Limpa a tabela

    List<Agendamento> agendamentos = agendamentoDAO.listarAgendamentos();

    for (Agendamento agendamento : agendamentos) {
        model.addRow(new Object[]{
            agendamento.getId(),                 // ID (oculto)
            agendamento.getNome(),               // Nome do cliente
            agendamento.getCpfCliente(),         // CPF
            agendamento.getTipoAtendimento(),    // Serviço
            agendamento.getEspecificacao(),      // Especificação
            agendamento.getData(),               // Data
            agendamento.getHora(),               // Hora
            agendamento.getStatusFormatado()     // "Pago" ou "Pendente"
        });
    }

    // Oculta a coluna de ID
    tableAgenda.getColumnModel().getColumn(0).setMaxWidth(0);
    tableAgenda.getColumnModel().getColumn(0).setMinWidth(0);
    tableAgenda.getColumnModel().getColumn(0).setPreferredWidth(0);
}

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableAgenda = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtBuscarCpf = new javax.swing.JTextField();
        btnPesquisar = new javax.swing.JButton();
        btnEditar = new javax.swing.JButton();
        btnExcluir = new javax.swing.JButton();
        btnDetalhes = new javax.swing.JButton();
        btnPagamento = new javax.swing.JButton();
        btnVoltar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tableAgenda.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Nome", "CPF", "Serviço", "Especificação", "Data", "Hora", "Status Pagamento"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, true, true, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tableAgenda);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setText("MyLashes");

        jLabel2.setText("Buscar agendamento por CPF:");

        btnPesquisar.setBackground(new java.awt.Color(105, 109, 168));
        btnPesquisar.setForeground(new java.awt.Color(255, 255, 255));
        btnPesquisar.setText("Pesquisar");
        btnPesquisar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPesquisarActionPerformed(evt);
            }
        });

        btnEditar.setBackground(new java.awt.Color(51, 51, 51));
        btnEditar.setForeground(new java.awt.Color(255, 255, 255));
        btnEditar.setText("Editar");
        btnEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditarActionPerformed(evt);
            }
        });

        btnExcluir.setBackground(new java.awt.Color(51, 51, 51));
        btnExcluir.setForeground(new java.awt.Color(255, 255, 255));
        btnExcluir.setText("Excluir");
        btnExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExcluirActionPerformed(evt);
            }
        });

        btnDetalhes.setBackground(new java.awt.Color(51, 51, 51));
        btnDetalhes.setForeground(new java.awt.Color(255, 255, 255));
        btnDetalhes.setText("Detalhes");
        btnDetalhes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDetalhesActionPerformed(evt);
            }
        });

        btnPagamento.setBackground(new java.awt.Color(105, 109, 168));
        btnPagamento.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnPagamento.setForeground(new java.awt.Color(255, 255, 255));
        btnPagamento.setText("Pagamento");
        btnPagamento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPagamentoActionPerformed(evt);
            }
        });

        btnVoltar.setBackground(new java.awt.Color(51, 51, 51));
        btnVoltar.setForeground(new java.awt.Color(255, 255, 255));
        btnVoltar.setText("Voltar");
        btnVoltar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVoltarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(45, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(240, 240, 240)
                        .addComponent(jLabel1))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 574, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(txtBuscarCpf, javax.swing.GroupLayout.PREFERRED_SIZE, 456, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                    .addComponent(btnEditar, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(btnExcluir, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGap(18, 18, 18)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(btnDetalhes, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnPesquisar, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(btnVoltar, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(67, 67, 67)
                            .addComponent(btnPagamento))))
                .addGap(58, 58, 58))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(26, 26, 26)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtBuscarCpf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnPesquisar))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnEditar)
                    .addComponent(btnExcluir)
                    .addComponent(btnDetalhes))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 211, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnPagamento)
                    .addComponent(btnVoltar))
                .addGap(23, 23, 23))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnPesquisarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPesquisarActionPerformed
         /**
     * Evento acionado ao clicar no botão de pesquisa.
     * Filtra os agendamentos pelo CPF digitado.
     * @param evt Evento de clique no botão.
     */ 
        String cpf = txtBuscarCpf.getText().trim();

    if (cpf.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Informe um CPF para buscar.");
        return;
    }

    if (!cpf.matches("\\d{11}")) {
        JOptionPane.showMessageDialog(this, "CPF inválido! Digite um CPF com 11 números.");
        return;
    }

    // Busca os agendamentos no DAO
    List<Agendamento> agendamentos = AgendamentoDAO.buscarAgendamentosPorCpf(cpf);

    // Depuração para verificar se há resultados
    System.out.println("Agendamentos encontrados: " + agendamentos.size());

    if (agendamentos.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Nenhum agendamento encontrado para este CPF.");
    }

    // Atualiza a tabela, mesmo que a lista esteja vazia
    atualizarTabelaComAgendamentos(agendamentos);
    }//GEN-LAST:event_btnPesquisarActionPerformed
 /**
     * Atualiza a tabela com uma lista específica de agendamentos.
     * @param agendamentos Lista de agendamentos a serem exibidos.
     */
    private void atualizarTabelaComAgendamentos(List<Agendamento> agendamentos) {
    DefaultTableModel model = (DefaultTableModel) tableAgenda.getModel();
    model.setRowCount(0); // Limpa a tabela

    for (Agendamento agendamento : agendamentos) {
        model.addRow(new Object[]{
            agendamento.getId(),                 
            agendamento.getNome(),              
            agendamento.getCpfCliente(),         
            agendamento.getTipoAtendimento(),    
            agendamento.getEspecificacao(),      
            agendamento.getData(),               
            agendamento.getHora(),               
            agendamento.getStatusFormatado()
        });
    }

    // Oculta a coluna do ID
    tableAgenda.getColumnModel().getColumn(0).setMaxWidth(0);
    tableAgenda.getColumnModel().getColumn(0).setMinWidth(0);
    tableAgenda.getColumnModel().getColumn(0).setPreferredWidth(0);
}
    private void btnEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditarActionPerformed
       /**
     * Evento acionado ao clicar no botão de edição.
     * Abre a tela de edição para o agendamento selecionado.
     * @param evt Evento de clique no botão.
     */
    int selectedRow = tableAgenda.getSelectedRow();
    if (selectedRow != -1) {

        int id = Integer.parseInt(tableAgenda.getValueAt(selectedRow, 0).toString());

        Agendamento agendamento = AgendamentoDAO.buscarAgendamentoPorId(id); 
        if (agendamento != null) {
            // Abre a tela de edição
            new TelaAgendamento(agendamento).setVisible(true);
            dispose(); // 
        } else {
            JOptionPane.showMessageDialog(this, "Agendamento não encontrado.");
        }
    } else {
        JOptionPane.showMessageDialog(this, "Selecione um agendamento para editar.");
    }
    }//GEN-LAST:event_btnEditarActionPerformed

    private void btnExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExcluirActionPerformed
       /**
     * Evento acionado ao clicar no botão de exclusão.
     * Remove o agendamento selecionado.
     * @param evt Evento de clique no botão.
     */
    int selectedRow = tableAgenda.getSelectedRow();
    if (selectedRow != -1) {
        
        int id = Integer.parseInt(tableAgenda.getValueAt(selectedRow, 0).toString());

        int confirm = JOptionPane.showConfirmDialog(this, "Tem certeza que deseja excluir este agendamento?", "Confirmar exclusão", JOptionPane.YES_NO_OPTION);
        if (confirm == JOptionPane.YES_OPTION) {
            boolean sucesso = AgendamentoDAO.excluirAgendamentoPorId(id);
            if (sucesso) {
                JOptionPane.showMessageDialog(this, "Agendamento excluído com sucesso!");
                atualizarTabela(); // Recarrega os dados da tabela
            } else {
                JOptionPane.showMessageDialog(this, "Erro ao excluir agendamento.");
            }
        }
    } else {
        JOptionPane.showMessageDialog(this, "Selecione um agendamento para excluir.");
    }
    }//GEN-LAST:event_btnExcluirActionPerformed

    private void btnDetalhesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDetalhesActionPerformed
        /**
     * Evento acionado ao clicar no botão de detalhes.
     * Exibe informações detalhadas sobre o agendamento selecionado.
     * @param evt Evento de clique no botão.
     */
        int selectedRow = tableAgenda.getSelectedRow();
    if (selectedRow != -1) {
        String cpfCliente = tableAgenda.getValueAt(selectedRow, 2).toString();

        // Buscar os agendamentos do cliente
        List<Agendamento> agendamentos = agendamentoDAO.buscarAgendamentosPorCpf(cpfCliente);
        if (agendamentos != null && !agendamentos.isEmpty()) {
            StringBuilder detalhes = new StringBuilder();
            for (Agendamento agendamento : agendamentos) {
                detalhes.append("Detalhes do Agendamento:\n")
                        .append("Data: ").append(agendamento.getData()).append("\n")
                        .append("Hora: ").append(agendamento.getHora()).append("\n")
                        .append("Tipo: ").append(agendamento.getTipoAtendimento()).append("\n")
                        .append("Especificação: ").append(agendamento.getEspecificacao()).append("\n")
                        .append("Valor: R$ ").append(String.format("%.2f", agendamento.getValor())).append("\n\n");
            }
            JOptionPane.showMessageDialog(this, detalhes.toString());
        } else {
            JOptionPane.showMessageDialog(this, "Nenhum agendamento encontrado para este cliente.");
        }
    } else {
        JOptionPane.showMessageDialog(this, "Selecione um agendamento para ver os detalhes.");
    }
    }//GEN-LAST:event_btnDetalhesActionPerformed

    private void btnVoltarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVoltarActionPerformed
        /**
 * Manipula a ação do botão "Voltar".
 * Abre a tela de ações (TelaAcoes) e fecha a tela atual.
 * 
 * @param evt Evento de clique no botão "Voltar".
 */
        new TelaAcoes().setVisible(true);
        dispose();
    }//GEN-LAST:event_btnVoltarActionPerformed

    private void btnPagamentoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPagamentoActionPerformed
       
       /**
     * Evento acionado ao clicar no botão de pagamento.
     * Registra o pagamento do agendamento selecionado.
     */
    int selectedRow = tableAgenda.getSelectedRow();
    if (selectedRow != -1) {
        String cpfCliente = tableAgenda.getValueAt(selectedRow, 2).toString(); 
        String data = tableAgenda.getValueAt(selectedRow, 5).toString();      
        String hora = tableAgenda.getValueAt(selectedRow, 6).toString();      

        boolean sucesso = agendamentoDAO.registrarPagamento(cpfCliente, data, hora);
        if (sucesso) {
            JOptionPane.showMessageDialog(this, "Pagamento registrado com sucesso!");
            atualizarTabela();
        } else {
            JOptionPane.showMessageDialog(this, "Erro: Agendamento não encontrado!", "Erro", JOptionPane.ERROR_MESSAGE);
        }
    } else {
        JOptionPane.showMessageDialog(this, "Selecione um agendamento para registrar o pagamento.");
    }
    }//GEN-LAST:event_btnPagamentoActionPerformed

   
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDetalhes;
    private javax.swing.JButton btnEditar;
    private javax.swing.JButton btnExcluir;
    private javax.swing.JButton btnPagamento;
    private javax.swing.JButton btnPesquisar;
    private javax.swing.JButton btnVoltar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tableAgenda;
    private javax.swing.JTextField txtBuscarCpf;
    // End of variables declaration//GEN-END:variables
}
